{"remainingRequest":"D:\\3-PROGRAM\\v\\v2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\3-PROGRAM\\v\\v2\\src\\components\\Map2.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\3-PROGRAM\\v\\v2\\src\\components\\Map2.vue","mtime":1632036799369},{"path":"D:\\3-PROGRAM\\v\\v2\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\3-PROGRAM\\v\\v2\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\3-PROGRAM\\v\\v2\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\3-PROGRAM\\v\\v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\3-PROGRAM\\v\\v2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCiNtYXAgew0KICB3aWR0aDogOTB2dzsNCiAgaGVpZ2h0OiA1MHZ3Ow0KfQ0K"},{"version":3,"sources":["Map2.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA;AACA;AACA;AACA","file":"Map2.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-flex xs4>\r\n    <v-card>\r\n      <div id=\"map\"></div>\r\n    </v-card>\r\n  </v-flex>\r\n</template>\r\n\r\n<script>\r\nimport $Scriptjs from 'scriptjs';\r\nimport { eventBus } from '@/event-bus.js';\r\nexport default {\r\n  name: \"Map\",\r\n  data() {\r\n    return {\r\n      map: null,\r\n      marker: null,\r\n      lastLat: null,\r\n      lastLng: null,\r\n      getNextPage: null,\r\n      // center around the Upper West Side, NYC\r\n      DEFAULT_LAT: 40.780,\r\n      DEFAULT_LNG: -73.974,\r\n      geocoder: null,\r\n      placesService: null,\r\n      mapGoogleGeometryMultiPoly: null,\r\n      mapNumGeometries: 0\r\n    }\r\n  },\r\n  mounted: function() {\r\n    // use your own key...\r\n    $Scriptjs(\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY_HERE&libraries=geometry,places\", () => {\r\n      this.initMap();\r\n    });\r\n    eventBus.$on('newTextAddress', (payload) => {\r\n      this.updateFromTextAddress(payload);\r\n    });\r\n    eventBus.$on('sendCityData', (payload) => {\r\n      this.renderCityMap(payload.coordinates);\r\n      this.setDataLayer(payload.multiPoly, payload.numGeometries);\r\n    })\r\n    eventBus.$on('launchKeywordSearch', (payload) => {\r\n      this.doKeywordSearch(payload);\r\n    })\r\n  },\r\n  methods: {\r\n    // simple way to sleep..\r\n    wait (timeout) {\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve()\r\n        }, timeout)\r\n      })\r\n    },\r\n    setDataLayer(googleGeometryMultiPoly, numGeometries) {\r\n      this.mapGoogleGeometryMultiPoly = googleGeometryMultiPoly;\r\n      this.mapNumGeometries = numGeometries;\r\n    },\r\n    updateFromTextAddress(payload) {\r\n      this.map.setCenter(payload.geometry.location);\r\n      this.updateMarker(payload.geometry.location);\r\n      this.lastLat = payload.geometry.location.lat();\r\n      this.lastLng = payload.geometry.location.lng();\r\n    },\r\n    renderCityMap(myCityData) {\r\n      myCityData.setMap(this.map);\r\n      // and pass clicks on to the underlying map\r\n      myCityData.addListener('click', (event) => {\r\n        google.maps.event.trigger(this.map, 'click', event);\r\n      });\r\n    },\r\n    initMap() {\r\n      this.geocoder = new google.maps.Geocoder();\r\n      this.map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        center: {\r\n          lat: this.DEFAULT_LAT,\r\n          lng: this.DEFAULT_LNG\r\n        },\r\n        zoom: 15,\r\n        gestureHandling: \"greedy\"\r\n      });\r\n      this.placesService = new google.maps.places.PlacesService(this.map);\r\n      google.maps.event.addListener(this.map, \"click\", (event) => {\r\n        this.lastLat = event.latLng.lat();\r\n        this.lastLng = event.latLng.lng();\r\n        this.updateMarker(event.latLng);\r\n        this.geocoder.geocode({'location': event.latLng}, (results, status) => {\r\n          if (results) {\r\n            eventBus.$emit('mapAddress', results);\r\n          }\r\n        });\r\n      });\r\n      // now we can init other things that depend on Google being loaded\r\n      // tell the event bus\r\n      eventBus.$emit('googleInit', {});\r\n    },\r\n    updateMarker(latLng) {\r\n      if (!this.marker) {\r\n        this.marker = new google.maps.Marker({\r\n          map: this.map\r\n        });\r\n      }\r\n      this.marker.setPosition(latLng);\r\n    },\r\n    searchResultMarkers(results) {\r\n      // if we have not pulled in City Boundaries, this is our default\r\n      let filteredresults = results;\r\n      if (this.mapNumGeometries > 0 && this.mapGoogleGeometryMultiPoly) {\r\n        filteredresults = [];\r\n        results.map((curPlace) => {          \r\n          for (let i = 0; i < this.mapNumGeometries; i++) {\r\n            if (google.maps.geometry.poly.containsLocation(\r\n              curPlace.geometry.location,\r\n              this.mapGoogleGeometryMultiPoly [i]) == true) {\r\n                filteredresults.push(curPlace);\r\n            }\r\n          }\r\n        });\r\n      }\r\n      filteredresults.map((place) => {\r\n        let image = {\r\n          url: place.icon,\r\n          size: new google.maps.Size(71, 71),\r\n          origin: new google.maps.Point(0, 0),\r\n          anchor: new google.maps.Point(0, 0),\r\n          scaledSize: new google.maps.Size(15, 15)\r\n        };\r\n  \r\n        let marker = new google.maps.Marker({\r\n          map: this.map,\r\n          icon: image,\r\n          title: place.name,\r\n          position: place.geometry.location\r\n        });\r\n      })\r\n    },\r\n    doSearch(params) {\r\n      // yeah, I know, using _this ...\r\n      // I really dont like how Google sets up pagination for this (compared to Yelp and others)\r\n      // I should write this as a var pointing to a function definition etc...\r\n      let _this = this;\r\n      // see https://developers.google.com/maps/documentation/javascript/examples/place-search-pagination\r\n      this.placesService.nearbySearch(params,\r\n        async function (results, PlacesServiceStatus, PlaceSearchPagination) {\r\n          if (PlacesServiceStatus !== 'OK') return;\r\n          _this.searchResultMarkers(results);\r\n          if (PlaceSearchPagination.hasNextPage) {\r\n            // slight pause...\r\n            await _this.wait(100); \r\n            _this.getNextPage = PlaceSearchPagination.hasNextPage && function() {\r\n              PlaceSearchPagination.nextPage();\r\n            }\r\n          } else {  // null this so that we dont double up on api calls\r\n            _this.getNextPage = null;\r\n          }\r\n          // invoke...\r\n          if (_this.getNextPage) {\r\n            _this.getNextPage();\r\n          }\r\n        }\r\n      );\r\n    },\r\n    googlePlacesSearch(keyword, radius = 1000) {\r\n      if (!keyword.trim()) return;\r\n      let params = {\r\n        location: new google.maps.LatLng(this.lastLat, this.lastLng),\r\n        radius: radius,\r\n        keyword: keyword\r\n      };\r\n      this.doSearch(params);\r\n    },\r\n    doKeywordSearch(keyword) {\r\n      // one could expand here to search other services besides Google...\r\n      this.googlePlacesSearch(keyword, 500);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 90vw;\r\n  height: 50vw;\r\n}\r\n</style>"]}]}